const puzzle = `
#################################################################################
#.....#.............#.....#g......#.....#..............i..#.....#.......#.......#
#.###.###.#########.#.###.#.#.###.#.###.#########.#######.#.###.#####.#.#######.#
#...#...#.....#...#.#.#..e#.#...#.#...#.#......f..#.....#...#.#.#.....#...#.....#
#.#.###.#####.#.###.#.#####.###H###.###.#.#########.#.#######.#.#.#######.#.###.#
#.#t#...#.....#.#...#...#...#.#.....#...#.#.......#.#.........#...#.#.....#.#.#.#
#.#.#.###.#####.#.#####.#.###.#######.#.#.#.#####.#.#########.#####.#.#####.#A#.#
#.#.#.....#..c..#...#...#...#...#.#...#.#...#.#...#.#...#...#.............Q.#...#
###.#######.#######.#.#####.#.#.#.#.###.#.###.#.###.#.###.#.#.#################.#
#...#.....#.....#...#.........#...#.#...#.#...#.#.#...#...#.#...#...#...#.....#.#
#.###.###.#.###.#.#################.#####.#.#.#.#.#.###.###.###.###.#.#.#.###.#.#
#.#.#...#.#...#...........#.......#.#...#.#.#.#.#...#...#...#.......#.#...#...#.#
#.#.#.#.###.#############.#.#####.#.#.#.#.#.#.#.#.###.###.#.#########.#####.###.#
#.#.#.#.....#.........J.#...#...#.#...#.#...#.#.#.#...#.#.#.#...#.......#...#.#k#
#.#.#.#######.#########.#####.###.#.###.#####.#.###.###.#.###.#.#.#####.#.###.#.#
#.#.........#.........#...#.......#.#...#...#.#......l..#.....#...#...#.#...#...#
#.#####.#########.#######.#.#########.#.#.#.###########.#####.#####.#.#####.#.###
#.#...#.#.....#.#.#.......#...#.......#.#.#...........#.#...#...#...#.......#.#.#
#.#.#.###.#.#.#.#W#.#########.#.#######.#.###########.###.#.#####.###########.#.#
#.#.#.....#.#...#.#...#.....#..o#.....#.#.....#.....#.....#....r..#..z#.#.....#.#
#.#.#######.###.#.###M#.#.###########.#.#.###.###.#.#####.#########.#.#.#.#####.#
#.#.#.#.....#...#...#.#.#.#.........#.#.#y#.#...#.#.#.....#...#.....#...#.#.....#
#.#.#.#.#####.#####.###.###.###.###.#.#.#.#.###.###.#.#####.###.#######.#.###.###
#...#.#.#...#.....#...#.#...#.#...#...#.#.....#...#.#.#...#...#...#.#...#...#m..#
#.###.#.###.#####.###.#.#.###.###.#####.#########.#.#.#.#####.###.#.#.#####.#.#.#
#.#...#...#.......#...#...#...#...#.....#.........#...#.....#.#...#.Z.#.U.#.#.#.#
#.###.###.#.#######.###.###.#.#.###.#####.###########.#.###.#.#.###.###.#.#.###.#
#...#...#.#.#.....X.#.#.#...#.#.....#d..#...........#.#...#.#.#.#u....#.#.#...#.#
###.#.###.#.#.#######.#.#.###.#######.#.#.#########.#.#####.#.#.#####.###.###.#.#
#.#.#.#...#.#.....#...#...#.#.....#...#.#.#.........#.......#.#.....#.....#.V.#.#
#.#.#.#.###.#####.#.#.#####.#####.#.#######.#########.#######.#.###.#.#####.###.#
#.....#...#.#...#.#.#.......#...#.#.....#...#.......#.#.....#.#...#.#.#..x#.#...#
#.#######.#.#.###.#.#####.###.#.#.#####.#.###.#####.###.###N#.#.###.###.#.#.###.#
#.#...#...#.#.#...#...#.#...#.#...#...#.#...#.#...#...#.#...#.#.#...#...#...#j..#
#.#.#.#.###.#.#.#####.#.###.#.#####.#.#.#.#.#.#.#.###.#.#.###.###.###.#######.###
#.#.#...#.....#.....#...#...#...#...#...#.#.#.#.#...#...#...#...#...#...#.......#
#.#.###.###########.###.#.#####.#.#.#######.#.#.###.#######.###.###.###.#.#####.#
#.#...#.#.....#.....#...#.....#.#.#.....#...#...#.#.#.P...#...#.#...#...#.#.....#
#.###.###.###.#.#####.#######.#.#######.#.#######.#.#####.###.#.#.###.#####.###.#
#...#.......#.K.#...........#..p............................#...#...........#...#
#######################################.@.#######################################
#.B.....#.....#.............#...............#.......#.....#...........#...#.....#
#####.#.#.#.###.#########.#.#.#.#########.###.#.###.###.#.#.#.#########.#.#.#.###
#...#.#.#.#.....#.........#.#.#.#.......#.#...#...#.....#.#.#.#...#.....#...#...#
#.#.#.###.#######.#########.###.#.#####.#.#.#####.#######.#.#.#.#.#.###########.#
#.#...#...#n......#...#.........#...#...#.#...#.#...#...#.#.#b#.#...#...#.....#.#
#.###.#.###.#######.#.#.###########.#.#.#.###.#.###.#.#.#.#.###.#######.#.###.#.#
#...#.#.#.#...#.....#.#.#.........#.#.#.#...#...#.#.#.#.#.#...#.#.......#.#...#.#
#.#.###.#.###.#####.#.#.#.#####.###.#.#.#.#.###.#.#.###.#.###.#.#.###.###.#.###.#
#.#.#.......#.....#.#...#.#...#.....#.#.#.#.#...#.#...#.......#.#...#.#...#.#...#
#.#.#.###########.#.#####.#.#########.#.#.###.###.###.#########.#.#.#.#.###.###.#
#.#...#.....#...#.#.....#.#.......#...#.#.....#.....#...........#.#.#.#.#...#...#
#######.###.#.#.#.#####.#.#.#.###.#.###.#.#######.#.#############.#.#.#.#.###.#.#
#.......#...#.#.#...#...#.#.#.#...#.#...#.#.......#...#.........#.#.#.#.#.....#.#
#.#######.###.#.#.#.#####.#.#.#.###.#.###.#.#########.###.#####S###.#.#.#######.#
#......a#....v#.#.#.......#.#.#...#.#.#.#.#...#.#.....#...#...#.....#.#...#.....#
#######.#######.###.#########.###.#.#.#.#.###.#.#.#####.###.#.#######.###.###.###
#.......#.....#...#.....#...#.#.#.#.#.#.#...#.#.....#...#.#.#.#.........#...#...#
#.#######.#.#####.#####.#.#.#.#.#.#.#.#.###.#.#####.#.###.#.#.#.#######.###.#####
#.....#...#.....#.#.......#...#.#.#.#...#.#.#...#.#.#.#...#.#...#.....#...#.....#
#####.#.#######.#.#############.#.#.###.#.#.###.#.#.#.#.#.#.###.#.###.###.#####.#
#...#.#.......#.#...#.#.........#.#.#...#.#.#...#.....#.#...#.#.#.#.#.#.#.#...#.#
#.#.#.#########.###.#.###.#.###.#.#.###.#.#.#.#############.#.###.#.#.#.#.#.#.#.#
#.#.#q....#...#...#.#...#.#...#.#.#...#.#...#.....#.......#.#.....#.#.#.#.#.#.#.#
#.#.#####.#.#.#.###.###.###.#.###.###.#.#.#####.#.#.#####.#.#######.#.#.#.#.#.#.#
#.#.....#...#...#.....#...#.#...#...#.#.#.....#.#...#.....#.......#...#...#.#...#
#######.#######.#.###.###.#####.###.#.#######.#######.#.###########.###.###.#####
#.....I.#.......#...#.#.#.....#.#...#...#.D...#.......#.#.......#...#.....#.#...#
#.#####.#.#########.#.#.#####.#.#.#####.#.#####.#######.#.#####.#.#########.###.#
#.#...#.#.#...#...#w#...#.....#...#...#.#...#...#.......#.#.....#.......#...#...#
#.###.#.#.#.#.#.###.#####.#####.###.#.#.###.#.#.#####.###G#.###########.#.###.###
#...#...#...#.#...#.....#.#...#.#.#.#...#.#.#.#.....#...#.#.#.........#...#.....#
#.#.###.#####.###.#####.#.#.###.#.#.#####.#.#######.#####.#.#.#######.#####.###.#
#.#...#..s#.F.#...T.#.#...#.......#.#...#.#.......#.......#.#.#.#.....#...#...#.#
#.###.###.#.###.###.#.#####.#######.#.#.#.#######.#.#######.#.#.#R###.#.#.#.###.#
#.#...#...#...#.#...#...#.....#...#...#.#...#.....#...#...#.#.#.#.#.#.#.#.#.#..h#
#.#.#########.#.#.###.#.#######.#C#####.###.#.#########.#.#.#.#.#.#O#.###.#.#.#.#
#.#.#...#...#...#.#.L.#.#...#...#.....#.#...#...#...#...#.#.....#.#.#...#...#.#.#
#.#.#.#.#.#.#####.###.#.#E#.#.#######.#.#.#####.#.#Y#.###.#######.#.###.#####.#.#
#.#...#...#...........#...#...#.........#.........#...#...........#...........#.#
#################################################################################
`
const demo1 = `
########################
#f.D.E.e.C.b.A.@.a.B.c.#
######################.#
#d.....................#
########################
`
const demo2 = `
########################
#@..............ac.GI.b#
###d#e#f################
###A#B#C################
###g#h#i################
########################
`
const demo3 = `
#################
#i.G..c...e..H.p#
########.########
#j.A..b...f..D.o#
########@########
#k.E..a...g..B.n#
########.########
#l.F..d...h..C.m#
#################
`


class Robot {

    constructor(map, position, steps = 0) {
        this.map = map;
        this.steps = steps;
        this.position = position;
        this.ownedKeys = [];
    }

    isUpperCase (char) {
        return char == char.toUpperCase() ? true : false
    } 

    ownThatKey (key) {
        return this.ownedKeys.includes(key.toLowerCase())
    }

    oppositeDirection (d) {

        switch (d) {
            case 1:
                return 3
                break;
            case 2:
                return 4
                break;
            case 3:
                return 1
                break;
            case 4:
                return 2
                break;
        }

    }

    move (d) {

        const {x,y} = this.position;

        this.map[y][x] = '.'

        switch (d) {
            case 1: //UP
                this.position.y--
                break;
            case 3: //DOWN
                this.position.y++
                break;
            case 4: //LEFT
                this.position.x--
                break;
            case 2: //RIGHT
                this.position.x++
                break;
        }

        this.map[this.position.y][this.position.x] = '@'

    }

    newDirection() {

        const {x,y} = this.position;

        const left = this.map[y][x-1]
        const right = this.map[y][x+1]
        const up = this.map[y-1][x]
        const down = this.map[y+1][x]

        const directions = [];
       
        [up, right, down, left].forEach( (dir, i) => {

            if(dir !== '#' && !this.ownThatKey(dir) ) {
                directions.push(i)

                if (dir !== '.' && !this.isUpperCase(dir)) {
                    // key
                    this.ownedKeys.push(dir)
                } 
            }

        })
        
        console.log(directions)

    }

    run(ctx) {

        while(!this.cross && !this.impasse && !this.ObjectFound) {

            const [output] = this.computer.giveInput([this.direction]).run(1);

            if (output === 0) {

                console.log('wall hitted')

            } else if(output === 1) {

                this.move(this.direction);
                this.draw(ctx, "rgba(0, 0, 0, 0.2)")
                this.newDirection();

                if(this.cross) {
                   this.draw(ctx, "rgba(255, 0, 255, 0.2)")
                }

                this.lastDirection = this.direction
                
            } else if(output === 2) {

                this.move(this.direction);
                this.draw(ctx, "#FF0000")
                this.ObjectFound = true;


            } else {
                console.log('output not known', output)
            }
              
            this.steps++

        }

        return {
            program:this.computer.program, 
            ways:this.ways, 
            x:this.x, y:this.y, 
            steps:this.steps, 
            cross:this.cross,
            impasse:this.impasse,
            ObjectFound:this.ObjectFound,
        }

    }

}

// class OxygenSystem {

//     constructor(input, dir, x, y, ctx) {
//         this.robot = [new Robot(input, dir, x, y).run(ctx)];
//         this.ObjectFound;
//         this.endPoints;
//         this.stop = false;
//     }

//     run(ctx) {

//         let i = 0;

//         while(!this.stop) {

//             let count = this.robot.length;

//             this.robot.forEach(robot => {

//             const {program, ways, x, y, steps} = robot

//                 for(let w = 0; w < ways.length; w++) {

//                     const output = new Robot(program, ways[w], x, y, steps).run(ctx);
                    
//                     if(output.ObjectFound || output.cross) {
//                         if(!this.robot.some(e => e.x === output.x && e.y === output.y)) {
//                             this.robot = [...this.robot, output]
//                         }
//                     }

//                     if(output.ObjectFound) {
//                         this.ObjectFound = {steps: output.steps, x:output.x, y:output.y, program:output.program, direction:output.direction}
//                     }

//                     if(output.impasse) {
//                         if(this.endPoints === undefined || this.endPoints.steps < output.steps) {
//                             this.endPoints = {x:output.x, y:output.y, steps:output.steps}
//                         }
//                     }
//                 }

//             })

//             if(count === this.robot.length) {
//                 this.stop = true
//             }

//             i++

//         }

//         return {part1: this.ObjectFound, part2: this.endPoints}

//     }

// }

const part1 = input => {
    const goal = input.replace(/[\n@.#A-Z]/g,"")
    const array = input.split('\n').slice(1,-1).map(e => e.split(''))

    let startingPosition = [];

    for (let y = 0; y < array.length; y++) {
        for (let x = 0; x < array[y].length; x++) {
            if(array[y][x] === '@') {
                startingPosition = {x,y};
                break;
            }
        }
    }

    const robot = new Robot(array, startingPosition)
    robot.move(2)
    console.log(robot.map)
    // robot.newDirection()

    return array
}




console.log('part1', part1(demo1)) // 282

